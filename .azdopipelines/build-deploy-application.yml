# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
#- master

pool:
  vmImage: ubuntu-latest
variables:
 resourceGroupName: "puracbiodemo-rg"
 location: "westeurope"
 APP_NAME: "puracdemo"
 APP_ENV: "dev" 
 acaEnvName: "$(APP_NAME)-appenv-$(APP_ENV)"
 imageName: "ablbumapi"
 apiimageName: "ablbumapi1"
 uiimageName: "ablbumui1"
 pythonmageName: "ablbumapipython"
 tag: "$(Build.BuildId)"
 registry: "$(APP_NAME)contregistry$(APP_ENV).azurecr.io"
 containerRegistryName: "$(APP_NAME)contregistry$(APP_ENV)" 

stages:
  - stage: Dev
    jobs:
      - deployment: build_container_image
        displayName: build_container_image
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzureCLI@2
                  displayName: Build docker image for ComplianceWebApi and push to Azure container registry 
                  inputs:
                    azureSubscription: 'masterconnection'
                    scriptType: 'bash'
                    scriptLocation: 'scriptPath'
                    scriptPath: 'Infrastructure/scripts/builddocker.sh'
                  env:
                      apiimageName: $(apiimageName)
                      uiimageName: $(uiimageName)
                      tag: $(tag)
                      registry: $(registry)
                - task: AzureCLI@2
                  displayName: Deploy containerapp for Albumapi
                  inputs:
                    azureSubscription: 'masterconnection'
                    scriptType: 'bash'
                    scriptLocation: 'scriptPath'
                    scriptPath: 'Infrastructure/scripts/deploy-containerapp.sh'
                  env:
                    APP_NAME: $(APP_NAME)
                    APP_ENV: $(APP_ENV)
                    imageName: $(apiimageName)
                    tag: $(tag)
                    resourceGroupName: $(resourceGroupName)
                - task: AzureCLI@2
                  displayName: Deploy containerapp for Albumui
                  inputs:
                    azureSubscription: 'masterconnection'
                    scriptType: 'bash'
                    scriptLocation: 'scriptPath'
                    scriptPath: 'Infrastructure/scripts/deploy-containerapp.sh'
                  env:
                    APP_NAME: $(APP_NAME)
                    APP_ENV: $(APP_ENV)
                    imageName: $(uiimageName)
                    tag: $(tag)
                    resourceGroupName: $(resourceGroupName) 
                - task: AzureCLI@2
                  displayName: Deploy containerapp for Albumuipython
                  inputs:
                    azureSubscription: 'masterconnection'
                    scriptType: 'bash'
                    scriptLocation: 'scriptPath'
                    scriptPath: 'Infrastructure/scripts/deploy-containerapp.sh'
                  env:
                    APP_NAME: $(APP_NAME)
                    APP_ENV: $(APP_ENV)
                    imageName: $(pythonmageName)
                    tag: $(tag)
                    resourceGroupName: $(resourceGroupName)           
                # - task: AzureCLI@2
                #   displayName: Add Label to Container App
                #   inputs:
                #     azureSubscription: 'masterconnection'
                #     scriptType: 'bash'
                #     scriptLocation: 'scriptPath'
                #     scriptPath: 'Infrastructure/scripts/add-label-containerapp.sh'
                #   env:  
                #     containerRegistryName: $(containerRegistryName)                  
                #     imageName: $(imageName)
                #     tag: $(tag)                    
                #     resourceGroupName: $(resourceGroupName)
                # - task: AzureCLI@2
                #   displayName: Container app healthcheck witn new revision
                #   continueOnError: true 
                #   inputs:
                #     azureSubscription: 'masterconnection'
                #     scriptType: 'bash'
                #     scriptLocation: 'scriptPath'
                #     scriptPath: 'Infrastructure/scripts/containerapp-healthcheck.sh'
                #   env:  
                #     containerRegistryName: $(containerRegistryName)
                #     acaEnvName: $(acaEnvName)                  
                #     imageName: $(imageName)
                #     tag: $(tag)
                #     latestRevisionName: $(latestRevisionName)                    
                #     resourceGroupName: $(resourceGroupName)           

                        
  # - stage: Test
  #   jobs:
  #     - deployment: build_container_images_test
  #       displayName: build_container_images_test
  #       environment: Test
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #               - checkout: self
  #               - task: AzureCLI@2
  #                 displayName: Build docker image for ComplianceWebApi and push to Azure container registry 
  #                 inputs:
  #                   azureSubscription: 'masterconnection'
  #                   scriptType: 'bash'
  #                   scriptLocation: 'scriptPath'
  #                   scriptPath: 'Infrastructure/scripts/builddocker.sh'
  #                 env:
  #                     imageName: $(imageName)
  #                     tag: $(tag)
  #                     registry: $(registrytest)
  #               - task: AzureCLI@2
  #                 displayName: Deploy containerapp to Test
  #                 inputs:
  #                   azureSubscription: 'masterconnection'
  #                   scriptType: 'bash'
  #                   scriptLocation: 'scriptPath'
  #                   scriptPath: 'Infrastructure/scripts/deploy-containerapp.sh'
  #                 env:
  #                   APP_NAME: $(APP_NAME)
  #                   APP_ENV: $(APP_ENV_TEST)
  #                   imageName: $(imageName)
  #                   tag: $(tag)
  #                   resourceGroupName: $(resourceGroupName)       


